import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:web_socket_channel/web_socket_channel.dart';
import 'package:sushi_app/models/ad_banner.dart';
import 'package:sushi_app/services/api_constants.dart';
import 'package:sushi_app/utils/log_helper.dart';

class AdService {
  // WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  static WebSocketChannel connectToAds() {
    final wsBaseUrl = baseUrl.replaceFirst('http', 'ws').replaceAll('/api', '');
    final uri = Uri.parse('$wsBaseUrl/ws/banners');
    logInfo('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: $uri');
    return WebSocketChannel.connect(uri);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
static Future<List<AdBanner>> fetchAds({required String token}) async {
  final url = '$baseUrl/ads';
  logInfo('üì° –ó–∞–ø—Ä–æ—Å –±–∞–Ω–Ω–µ—Ä–æ–≤: $url');

  final response = await http.get(Uri.parse(url), headers: {
    'Authorization': 'Bearer $token',
  });

  // ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º —è–≤–Ω–æ –∫–∞–∫ UTF-8
  final decodedBody = utf8.decode(response.bodyBytes);
  logInfo('üì• –û—Ç–≤–µ—Ç –±–∞–Ω–Ω–µ—Ä–æ–≤: ${response.statusCode} $decodedBody');

  if (response.statusCode == 200) {
    final List<dynamic> data = json.decode(decodedBody);
    return data.map((e) => AdBanner.fromJson(e)).toList();
  } else {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: $decodedBody');
    throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: $decodedBody');
  }
}


  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
  static Future<void> createAdBanner({
    required String token,
    required String imageUrl,
    required String text,
  }) async {
    final url = '$baseUrl/ads';
    final payload = {'image_url': imageUrl, 'text': text};
    final body = jsonEncode(payload);

    logInfo('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞:\nURL: $imageUrl\nText: $text\nJSON: $body');

    final response = await http.post(
      Uri.parse(url),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: body,
    );

    logInfo('üì• –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: ${response.statusCode} ${response.body}');

    if (response.statusCode != 201) {
      logError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: ${response.body}');
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: ${response.body}');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
  static Future<void> deleteAdBanner({
    required String id,
    required String token,
  }) async {
    final url = '$baseUrl/ads/$id';
    logInfo('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞: $url');

    final response = await http.delete(
      Uri.parse(url),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );

    logInfo('üì• –û—Ç–≤–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: ${response.statusCode} ${response.body}');

    if (response.statusCode != 200) {
      logError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: ${response.body}');
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: ${response.body}');
    }
  }
}





