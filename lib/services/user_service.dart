import 'dart:convert';
import 'package:sushi_app/models/user.dart';
import 'package:sushi_app/services/api_constants.dart';
import 'package:sushi_app/services/http_helper.dart';
import 'package:sushi_app/utils/log_helper.dart';

class UserService {
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  static Future<List<User>> getAllUsers(String token) async {
    final url = '$baseUrl/users';
    final headers = authorizedHeaders(token);

    logInfo('üì• [GET ALL USERS] GET $url');
    logDebug('üì® Headers: $headers');

    final res = await getRequest(url, headers: headers);

    logInfo('‚úÖ Status: ${res.statusCode}');
    logDebug('üì¶ Response: ${utf8.decode(res.bodyBytes)}');

    if (res.statusCode == 200) {
      final data = json.decode(utf8.decode(res.bodyBytes)) as List;
      return data.map((u) => User.fromJson(u as Map<String, dynamic>)).toList();
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${utf8.decode(res.bodyBytes)}');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  static Future<User> getUserById(String id, String token) async {
    final url = '$baseUrl/users/$id';
    final headers = authorizedHeaders(token);

    logInfo('üì• [GET USER] GET $url');
    logDebug('üì® Headers: $headers');

    final res = await getRequest(url, headers: headers);

    logInfo('‚úÖ Status: ${res.statusCode}');
    logDebug('üì¶ Response: ${utf8.decode(res.bodyBytes)}');

    if (res.statusCode == 200) {
      return User.fromJson(json.decode(utf8.decode(res.bodyBytes)));
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${utf8.decode(res.bodyBytes)}');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  static Future<User> updateUserById(
    String id,
    Map<String, dynamic> data,
    String token,
  ) async {
    data.removeWhere((key, value) => value == null);

    final url = '$baseUrl/users/$id';
    final headers = authorizedHeaders(token);

    logInfo('üõ†Ô∏è [UPDATE USER] PUT $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $data');

    final res = await putRequest(url, data, headers: headers);

    logInfo('‚úÖ Status: ${res.statusCode}');
    logDebug('üì¶ Response: ${utf8.decode(res.bodyBytes)}');

    if (res.statusCode == 200) {
      return User.fromJson(json.decode(utf8.decode(res.bodyBytes)));
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${utf8.decode(res.bodyBytes)}');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> deleteUser(String id, String token) async {
    final url = '$baseUrl/users/$id';
    final headers = authOnlyHeaders(token);

    logInfo('üóëÔ∏è [DELETE USER] DELETE $url');
    logDebug('üì® Headers: $headers');

    final res = await deleteRequest(url, headers: headers);

    logInfo('‚úÖ Status: ${res.statusCode}');
    if (res.statusCode != 204) {
      logError('‚ùå Response Body: ${utf8.decode(res.bodyBytes)}');
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${utf8.decode(res.bodyBytes)}');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> updateUserRole(
    String id,
    String role,
    String token,
  ) async {
    final url = '$baseUrl/users/$id/role';
    final headers = authorizedHeaders(token);
    final body = {'role': role};

    logInfo('üîÅ [UPDATE ROLE] PUT $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final res = await putRequest(url, body, headers: headers);

    logInfo('‚úÖ Status: ${res.statusCode}');
    if (res.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(res.bodyBytes)}');
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: ${utf8.decode(res.bodyBytes)}');
    }
  }
}





