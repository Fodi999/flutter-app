// lib/services/menu_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:sushi_app/models/menu_item.dart';
import 'api_constants.dart';
import 'http_helper.dart';
import 'package:sushi_app/utils/log_helper.dart';

class MenuService {
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  static Future<List<MenuItem>> getMenuItems() async {
    final url = '$baseUrl/menu';
    logInfo('üì• [GET MENU ITEMS] GET $url');

    final response = await http.get(Uri.parse(url));

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseList<MenuItem>(
      response,
      (data) => MenuItem.fromJson(data),
      errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  static Future<List<MenuItem>> getMenuWithCategory() async {
    final url = '$baseUrl/menu/with-category';
    logInfo('üì• [GET MENU WITH CATEGORY] GET $url');

    final response = await http.get(Uri.parse(url));

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseList<MenuItem>(
      response,
      (data) => MenuItem.fromJson(data),
      errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  static Future<List<MenuItem>> getPublishedMenuWithCategory(String token) async {
    final url = '$baseUrl/published-with-category';
    final headers = authorizedHeaders(token);

    logInfo('üì• [GET PUBLISHED MENU WITH CATEGORY] GET $url');
    logDebug('üì® Headers: $headers');

    final response = await http.get(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseList<MenuItem>(
      response,
      (data) => MenuItem.fromJson(data),
      errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
  static Future<void> createMenuItem(MenuItem item, String token) async {
    final url = '$baseUrl/menu';
    final headers = authorizedHeaders(token);
    final body = jsonEncode(item.toJson(forUpdate: false));

    logInfo('üì§ [CREATE MENU ITEM] POST $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.post(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 201) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      successCode: 201,
      errorMessage: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥–∞',
    );
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
  static Future<void> updateMenuItem(String id, MenuItem item, String token) async {
    final url = '$baseUrl/menu/$id';
    final headers = authorizedHeaders(token);
    final body = jsonEncode(item.toJson(forUpdate: true));

    logInfo('üõ†Ô∏è [UPDATE MENU ITEM] PUT $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.put(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      errorMessage: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞',
    );
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
  static Future<void> deleteMenuItem(String id, String token) async {
    final url = '$baseUrl/menu/$id';
    final headers = authOnlyHeaders(token);

    logInfo('üóëÔ∏è [DELETE MENU ITEM] DELETE $url');
    logDebug('üì® Headers: $headers');

    final response = await http.delete(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      errorMessage: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞',
    );
  }

  /// –ü—É–±–ª–∏–∫–∞—Ü–∏—è / —Å–Ω—è—Ç–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–ª—é–¥–∞
  static Future<void> publishMenuItem(String id, String token) async {
    final url = '$baseUrl/menu/$id/publish';
    final headers = authorizedHeaders(token);

    logInfo('üîÑ [PUBLISH MENU ITEM] POST $url');
    logDebug('üì® Headers: $headers');

    final response = await http.post(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      errorMessage: '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–ª—é–¥–∞',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
  static Future<List<MenuItem>> getPublishedMenuItems(String token) async {
    final url = '$baseUrl/menu/published';
    final headers = authorizedHeaders(token);

    logInfo('üì• [GET PUBLISHED MENU ITEMS] GET $url');
    logDebug('üì® Headers: $headers');

    final response = await http.get(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseList<MenuItem>(
      response,
      (data) => MenuItem.fromJson(data),
      errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥',
    );
  }
}




