// lib/services/cart_service.dart

import 'package:sushi_app/models/cart.dart';
import 'package:sushi_app/services/api_constants.dart';
import 'package:sushi_app/services/http_helper.dart';

class CartService {
  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Cart> getCart({
    required String userId,
    required String token,
  }) async {
    final url = '$baseUrl/users/$userId/cart/';
    final response = await getRequest(
      url,
      headers: authorizedHeaders(token),
    );
    return handleResponseObject<Cart>(
      response,
      (json) => Cart.fromJson(json as Map<String, dynamic>),
      errorMessage: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã',
    );
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  static Future<CartItem> addToCart({
    required String userId,
    required String token,
    required String menuItemId,
    required String name,
    required int quantity,
    required double price,
    Map<String, dynamic> options = const {}, // üÜï
  }) async {
    final url = '$baseUrl/users/$userId/cart/';
    final body = {
      'menuItemId': menuItemId,
      'name': name,
      'quantity': quantity,
      'price': price,
      'options': options, 
    };
    final response = await postRequest(
      url,
      body,
      headers: authorizedHeaders(token),
    );
    return handleResponseObject<CartItem>(
      response,
      (json) => CartItem.fromJson(json as Map<String, dynamic>),
      successCode: 200,
      errorMessage: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
    );
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  static Future<CartItem> updateCartItem({
    required String userId,
    required String token,
    required String menuItemId,
    required int quantity,
  }) async {
    final url = '$baseUrl/users/$userId/cart/$menuItemId';
    final body = {'quantity': quantity};
    final response = await putRequest(
      url,
      body,
      headers: authorizedHeaders(token),
    );
    return handleResponseObject<CartItem>(
      response,
      (json) => CartItem.fromJson(json as Map<String, dynamic>),
      successCode: 200,
      errorMessage: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
    );
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  static Future<void> removeCartItem({
    required String userId,
    required String token,
    required String menuItemId,
  }) async {
    final url = '$baseUrl/users/$userId/cart/$menuItemId';
    final response = await deleteRequest(
      url,
      headers: authorizedHeaders(token),
    );
    // –ù–∞—à —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 No Content
    handleEmptyResponse(
      response,
      successCode: 204,
      errorMessage: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
    );
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
  static Future<void> clearCart({
    required String userId,
    required String token,
  }) async {
    final url = '$baseUrl/users/$userId/cart/';
    final response = await deleteRequest(
      url,
      headers: authorizedHeaders(token),
    );
    // 204 No Content
    handleEmptyResponse(
      response,
      successCode: 204,
      errorMessage: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã',
    );
  }
}




