import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/category.dart';
import 'api_constants.dart';
import 'http_helper.dart';
import 'package:sushi_app/utils/log_helper.dart'; // ‚úÖ –ª–æ–≥–≥–µ—Ä

class CategoryService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static Future<List<Category>> getCategories(String token) async {
    final url = '$baseUrl/categories';
    final headers = authorizedHeaders(token);

    logInfo('üì• [GET CATEGORIES] GET $url');
    logDebug('üì® Headers: $headers');

    final response = await http.get(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseList<Category>(
      response,
      (data) => Category.fromJson(data),
      errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
    );
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  static Future<Category> createCategory(String name, String token) async {
    final url = '$baseUrl/categories';
    final headers = authorizedHeaders(token);
    final body = jsonEncode({'name': name});

    logInfo('üì§ [CREATE CATEGORY] POST $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.post(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 201) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    return handleResponseObject<Category>(
      response,
      (data) => Category.fromJson(data),
      successCode: 201,
      errorMessage: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    );
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  static Future<void> updateCategory(String id, String name, String token) async {
    final url = '$baseUrl/categories/$id';
    final headers = authorizedHeaders(token);
    final body = jsonEncode({'name': name});

    logInfo('üõ†Ô∏è [UPDATE CATEGORY] PUT $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.put(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(response, errorMessage: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  static Future<void> deleteCategory(String id, String token) async {
    final url = '$baseUrl/categories/$id';
    final headers = authOnlyHeaders(token);

    logInfo('üóëÔ∏è [DELETE CATEGORY] DELETE $url');
    logDebug('üì® Headers: $headers');

    final response = await http.delete(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(response, errorMessage: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
  }
}


