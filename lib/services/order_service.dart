// lib/services/order_service.dart

import 'package:sushi_app/models/order.dart';
import 'package:sushi_app/services/http_helper.dart';
import 'package:sushi_app/services/api_constants.dart';
import 'package:sushi_app/utils/log_helper.dart';

class OrderService {
  static final _baseUrl = baseUrl;

  /// üì¶ –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
  static Future<void> createOrder({
    required String token,
    required String userId,
    required String name,
    required String phone,
    required String address,
    required List<Map<String, dynamic>> items,
    String? comment,
  }) async {
    final url = '$_baseUrl/users/$userId/order';
    final body = <String, dynamic>{
      'userId': userId,
      'name': name,
      'phone': phone,
      'address': address,
      'items': items,
      if (comment != null && comment.trim().isNotEmpty)
        'comment': comment.trim(),
    };

    logInfo('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', tag: 'OrderService');
    logDebug('‚û°Ô∏è URL: $url', tag: 'OrderService');
    logDebug('‚û°Ô∏è Body: $body', tag: 'OrderService');
    logDebug('‚û°Ô∏è Headers: ${authorizedHeaders(token)}', tag: 'OrderService');

    final response = await postRequest(
      url,
      body,
      headers: authorizedHeaders(token),
    );

    if (response.statusCode == 201) {
      logInfo('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', tag: 'OrderService');
    } else {
      logError(
        '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${response.statusCode} ${response.reasonPhrase}',
        tag: 'OrderService',
      );
      logDebug('üì¶ –û—Ç–≤–µ—Ç: ${response.body}', tag: 'OrderService');
    }

    handleEmptyResponse(
      response,
      successCode: 201,
      errorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
    );
  }

  /// üì• –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  static Future<List<Order>> fetchOrders({
    required String token,
    required String userId,
  }) async {
    final url = '$_baseUrl/users/$userId/orders';

    logInfo('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId', tag: 'OrderService');
    final response = await getRequest(
      url,
      headers: authorizedHeaders(token),
    );

    return handleResponseList(response, (data) => Order.fromJson(data));
  }

  /// üì• –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
  static Future<List<Order>> fetchAllOrders(String token) async {
    final url = '$_baseUrl/orders';

    logInfo('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)', tag: 'OrderService');
    final response = await getRequest(
      url,
      headers: authorizedHeaders(token),
    );

    return handleResponseList(response, (data) => Order.fromJson(data));
  }

  /// üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑: –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  static Future<void> repeatOrderToCart({
    required String token,
    required String userId,
    required int orderId,
  }) async {
    final url = '$_baseUrl/users/$userId/order/$orderId/repeat';

    logInfo('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #$orderId', tag: 'OrderService');
    final response = await postRequest(
      url,
      {}, // —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ, —Å–µ—Ä–≤–µ—Ä —Å–∞–º –ø–æ–≤—Ç–æ—Ä—è–µ—Ç
      headers: authorizedHeaders(token),
    );

    handleEmptyResponse(
      response,
      successCode: 200,
      errorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑',
    );
  }
}









