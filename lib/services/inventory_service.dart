import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/inventory_item.dart';
import 'api_constants.dart';
import 'http_helper.dart';
import 'package:sushi_app/utils/log_helper.dart'; // ‚úÖ –ª–æ–≥–≥–µ—Ä

class InventoryService {
  // üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞
  static Future<List<InventoryItem>> getInventoryItems(String token) async {
    final url = '$baseUrl/menu/inventory';
    final headers = authorizedHeaders(token); // ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫

    logInfo('üì• [GET INVENTORY] GET $url');
    logDebug('üì® Headers: $headers');

    final response = await http.get(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    logDebug('üì¶ Response: ${utf8.decode(response.bodyBytes)}');

    if (response.statusCode == 200) {
      return handleResponseList<InventoryItem>(
        response,
        (data) => InventoryItem.fromJson(data),
        errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–∞',
      );
    } else if (response.statusCode == 404) {
      return [];
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–∞: ${utf8.decode(response.bodyBytes)}');
    }
  }

  // ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  static Future<void> createInventoryItem(InventoryItem item, String token) async {
    final url = '$baseUrl/menu/inventory';
    final headers = authorizedHeaders(token);
    final body = jsonEncode(item.toJson());

    logInfo('üì§ [CREATE INVENTORY] POST $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.post(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 201) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      successCode: 201,
      errorMessage: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞',
    );
  }

  // ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  static Future<void> updateInventoryItem(String id, InventoryItem item, String token) async {
    final url = '$baseUrl/menu/inventory/$id';
    final headers = authorizedHeaders(token);
    final body = jsonEncode(item.toJson());

    logInfo('üõ†Ô∏è [UPDATE INVENTORY] PUT $url');
    logDebug('üì® Headers: $headers');
    logDebug('üì® Body: $body');

    final response = await http.put(Uri.parse(url), headers: headers, body: body);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      errorMessage: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞',
    );
  }

  // üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  static Future<void> deleteInventoryItem(String id, String token) async {
    final url = '$baseUrl/menu/inventory/$id';
    final headers = authOnlyHeaders(token);

    logInfo('üóëÔ∏è [DELETE INVENTORY] DELETE $url');
    logDebug('üì® Headers: $headers');

    final response = await http.delete(Uri.parse(url), headers: headers);

    logInfo('‚úÖ Status: ${response.statusCode}');
    if (response.statusCode != 200) {
      logError('‚ùå Response Body: ${utf8.decode(response.bodyBytes)}');
    }

    handleEmptyResponse(
      response,
      errorMessage: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞',
    );
  }
}





