import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:sushi_app/models/inventory_item.dart';

/// –ö–∞—Å—Ç–æ–º–Ω—ã–π ScrollBehavior, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º—ã—à—å—é
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  @override
  Set<PointerDeviceKind> get dragDevices => {
        PointerDeviceKind.touch,
        PointerDeviceKind.mouse,
        PointerDeviceKind.stylus,
        PointerDeviceKind.unknown,
      };
}

/// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –≤–∫–ª–∞–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
Future<InventoryItem?> showIngredientPicker({
  required BuildContext context,
  required List<InventoryItem> inventory,
}) {
  String filter = '';
  String selectedCategory = '–í—Å–µ';

  // –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryEmojis = {
    '—Å—ã—Ä—ã': 'üßÄ',
    '—Ä—ã–±–∞': 'üêü',
    '—Å–æ—É—Å—ã': 'ü•£',
    '–æ–≤–æ—â–∏': 'ü•ë',
    '—Ä–∏—Å': 'üçö',
    '—Å—É—à–∏': 'üç£',
    '–∑–µ–ª–µ–Ω—å': 'ü•¨',
  };

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –≤–∫–ª–∞–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categories = [
    '–í—Å–µ',
    '—Å—ã—Ä—ã',
    '—Ä—ã–±–∞',
    '—Å–æ—É—Å—ã',
    '–æ–≤–æ—â–∏',
    '—Ä–∏—Å',
    '—Å—É—à–∏',
    '–∑–µ–ª–µ–Ω—å',
  ];

  return showModalBottomSheet<InventoryItem>(
    context: context,
    isScrollControlled: true,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
    ),
    builder: (ctx) => DraggableScrollableSheet(
      expand: false,
      initialChildSize: 0.6,
      minChildSize: 0.3,
      maxChildSize: 0.95,
      builder: (_, scrollController) => StatefulBuilder(
        builder: (ctx, setModalState) {
          // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          final filtered = inventory.where((it) {
            final matchesFilter =
                it.name.toLowerCase().contains(filter.trim());
            final matchesCategory =
                selectedCategory == '–í—Å–µ' ||
                it.category.toLowerCase() == selectedCategory.toLowerCase();
            return matchesFilter && matchesCategory;
          }).toList();

          return Padding(
            padding: EdgeInsets.only(
              top: 16,
              bottom: MediaQuery.of(ctx).viewInsets.bottom + 16,
              left: 16,
              right: 16,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                SizedBox(
                  height: 48,
                  child: ScrollConfiguration(
                    behavior: MyCustomScrollBehavior(),
                    child: ListView.separated(
                      scrollDirection: Axis.horizontal,
                      itemCount: categories.length,
                      separatorBuilder: (_, __) => const SizedBox(width: 8),
                      itemBuilder: (_, i) {
                        final cat = categories[i];
                        final selected = cat == selectedCategory;
                        final emoji = categoryEmojis[cat];
                        return ChoiceChip(
                          labelPadding: const EdgeInsets.symmetric(horizontal: 12),
                          label: Text(
                            emoji != null ? '$emoji  $cat' : cat,
                            style: const TextStyle(fontSize: 14),
                            softWrap: false,
                            overflow: TextOverflow.visible,
                          ),
                          selected: selected,
                          onSelected: (_) {
                            setModalState(() => selectedCategory = cat);
                          },
                        );
                      },
                    ),
                  ),
                ),
                const SizedBox(height: 12),

                // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
                TextField(
                  decoration: const InputDecoration(
                    hintText: '–ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞',
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(),
                    isDense: true,
                  ),
                  onChanged: (v) => setModalState(() => filter = v.toLowerCase()),
                ),
                const SizedBox(height: 12),

                // –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                Expanded(
                  child: ListView.builder(
                    controller: scrollController,
                    itemCount: filtered.length,
                    itemBuilder: (_, i) {
                      final item = filtered[i];
                      final pricePerGram = item.pricePerKg / 1000;
                      final emoji =
                          categoryEmojis[item.category] ?? item.emoji ?? 'üçΩÔ∏è';
                      return ListTile(
                        leading: Text(
                          emoji,
                          style: const TextStyle(fontSize: 28),
                        ),
                        title: Text(item.name),
                        subtitle: Text(
                          '${item.pricePerKg.toStringAsFixed(0)} ‚ÇΩ/–∫–≥ '
                          '(${pricePerGram.toStringAsFixed(2)} ‚ÇΩ/–≥)',
                        ),
                        onTap: () => Navigator.pop(ctx, item),
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    ),
  );
}





