// lib/screens/admin/manage_ads.dart
import 'package:flutter/material.dart';
import 'package:sushi_app/models/ad_banner.dart';
import 'package:sushi_app/services/ad_service.dart';
import 'package:sushi_app/utils/log_helper.dart';
import 'package:sushi_app/widgets/admin/ad_banner_card.dart';

class ManageAdsScreen extends StatefulWidget {
  final String token;

  const ManageAdsScreen({super.key, required this.token});

  @override
  State<ManageAdsScreen> createState() => _ManageAdsScreenState();
}

class _ManageAdsScreenState extends State<ManageAdsScreen> {
  late Future<List<AdBanner>> _adsFuture;
  final _imageUrlController = TextEditingController();
  final _textController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadAds();
  }

  void _loadAds() {
    setState(() {
      _adsFuture = AdService.fetchAds(token: widget.token);
    });
  }

  Future<void> _addAdBanner() async {
    try {
      await AdService.createAdBanner(
        token: widget.token,
        imageUrl: _imageUrlController.text,
        text: _textController.text,
      );
      logInfo('üéâ –ù–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω');
      _imageUrlController.clear();
      _textController.clear();
      _loadAds();
    } catch (e) {
      logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞', error: e);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞')),
      );
    }
  }

 Future<void> _deleteBanner(String id) async {

    try {
      await AdService.deleteAdBanner(id: id, token: widget.token);
      logInfo('üóëÔ∏è –ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª—ë–Ω (id: $id)');
      _loadAds();
    } catch (e) {
      logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞', error: e);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            const Text(
              '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _imageUrlController,
              decoration: const InputDecoration(labelText: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
            ),
            TextField(
              controller: _textController,
              decoration: const InputDecoration(labelText: '–¢–µ–∫—Å—Ç / —Å–ª–æ–≥–∞–Ω'),
            ),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: _addAdBanner,
              child: const Text('–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä'),
            ),
            const Divider(height: 32),
            const Text(
              '–°–ø–∏—Å–æ–∫ –±–∞–Ω–Ω–µ—Ä–æ–≤',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            Expanded(
              child: FutureBuilder<List<AdBanner>>(
                future: _adsFuture,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (snapshot.hasError) {
                    return const Center(child: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤'));
                  }

                  final banners = snapshot.data!;
                  if (banners.isEmpty) {
                    return const Center(child: Text('–ë–∞–Ω–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'));
                  }

                  return ListView.builder(
                    itemCount: banners.length,
                    itemBuilder: (context, index) {
                      final banner = banners[index];
                      return AdBannerCard(
                        banner: banner,
                        onDelete: () => _deleteBanner(banner.id),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

